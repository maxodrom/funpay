<?php

/**
 * Class TestSms
 */
class TestSms
{
    /**
     * Анализирует входную строку $str на наличие кода подтверждения, суммы и кошелька.
     * В случае успеха возвращает массив с ключами 'confirmCode', 'amount' и 'YD',
     * соответствующими найденным коду подтверждения ("пароль"), итоговой суммы списания и номера YD-кошелька.
     * В случае неуспеха возращает false.
     *
     * @param string $str
     *
     * @return array|false
     */
    public static function parseResponse($str)
    {
        $patterns = [
            /**
             * Номер ЯД-кошелька.
             * В спецификации Yandex я не нашел указаний насчет валидизации номера кошелька.
             * Но результаты поиска по этой теме в Google дают предположения, что кошелек:
             * - может состоять от 12 до 15 цифр (в зависимости от года его создания);
             * - насколько можно понять, он должен начинаться на 4100...
             * (при необходимости можно расширить выбором из подмасок);
             * - другие требования могут уточнять паттерн.
             */
            'YD' => '/(4100\d{8,11})/um',
            /**
             * Итоговая сумма платежа (списания).
             * Например, так:
             * - начинается с одной или нескольких цифр;
             * - после которых может (а может и не) следовать символ точки или запятой с
             * - последующими 1-2 цифрами после которых непосредственно
             * - следует символ(ы) валюты (при необходимости можно расширить).
             */
            'amount' => '/(\d+([.,](\d{1,2})))?р(уб)?\./uim',
            // '/(\d+(\.,\d+)?)(\w+)?\./uim/', // можно и так, чуть более обобщенно
            /**
             * Пдлатежный пароль.
             * Насколько я понял, ограничивается 4 цифровыми символами, но можно при
             * необходимости опять-таки уточнить.
             * Чтобы не было путаницы с YD кошельком, после 4-х цифр кода не должно(!)
             * следовать других цифровых символов.
             */
            'confirmCode' => '/[\s]+(\d{4})(?!\d)/um',
        ];

        $result = [];
        foreach ($patterns as $k => $pattern) {
            if (preg_match($pattern, $str, $matches) && isset($matches[1])) {
                $result[$k] = $matches[1];
            }
        }

        return !empty($result) ? $result : false;
    }
}